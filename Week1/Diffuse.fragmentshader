#version 330

in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;


out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
};

struct Light
{
	vec3 position;
	//vec3 direction;
	vec3 color;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;

	float constant;
	float linear;
	float quadratic;

	vec3 direction;
	float coneAngle;
	float falloff;
};

uniform Material material;

uniform Light light;

void main(){
	vec4 diffColor = texture(material.diffuseTexture, retTexCoord);
	if(diffColor.a == 0){
		discard;
	}
	vec3 finalColor = vec3(0);
	

		vec3 lightDir = normalize(light.position - retFragPos);

		float lambertianStrength = dot(retNormal, lightDir);
		vec3 refl = reflect(-lightDir, retNormal);
		float specularStrength = pow(max(dot(refl, retViewDirection), 0.0f), material.specularStrength);
	

		vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light.ambientColor;
		vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light.diffuseColor;
		vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light.specularColor;

		finalColor += ambient+lambertian+specular;
	
	FragColor = vec4(finalColor, diffColor.a);
	
}